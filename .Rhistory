#'   var2 = c(2.3, 4.5, 1.9, 3.8, 6.7)
#' )
#' result <- test_lilliefors_all(data)
#' print(result)
#' @importFrom nortest lillie.test
#' @export
test_lilliefors_all <- function(data, alpha = 0.05) {
if (!requireNamespace("nortest", quietly = TRUE)) {
install.packages("nortest")
}
library(nortest)
results <- list()
for (column in colnames(data)) {
if (is.numeric(data[[column]])) {
# Realiza la prueba de Lilliefors
result <- lillie.test(data[[column]])
# Determina la normalidad
normality <- ifelse(result$p.value > alpha, "Es Normal", "No es Normal")
# Almacena los resultados
results[[column]] <- data.frame(Estadistica = round(result$statistic, 3),
Valor_p = round(result$p.value, 3),
Normalidad = normality,
stringsAsFactors = FALSE)
}
}
results_df <- do.call(rbind, results)
return(results_df)
}
test_lilliefors_all(iris)
library(roxygen2)
roxygen2::roxygenise()
devtools::document()
GKR::detectar_valores_atipicos(iris)
#' @param data Un marco de datos que contiene la variable a dicotomizar.
#' @param variable Nombre de la variable categórica a dicotomizar.
#' @return Un nuevo marco de datos con las variables dicotómicas añadidas.
#' @examples
#' data <- data.frame(
#'   gender = c("Male", "Female", "Male", "Female", "Male")
#' )
#' result <- dicotomize_categorical(data, "gender")
#' print(result)
#' @export
dicotomize_categorical <- function(data, variable) {
if (!is.data.frame(data)) {
stop("El argumento 'data' debe ser un marco de datos.")
}
if (!is.character(variable)) {
stop("El argumento 'variable' debe ser el nombre de una variable categórica.")
}
if (!variable %in% colnames(data)) {
stop("La variable especificada no está presente en el marco de datos.")
}
levels <- unique(data[[variable]])
new_data <- data
for (level in levels) {
new_col_name <- paste0(variable, "_", level)
new_data[[new_col_name]] <- as.numeric(data[[variable]] == level)
}
return(new_data)
}
dicotomize_categorical(iris$Species)
dicotomize_categorical(iris)
R.version.string
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
if (is.na(data[[columna]])) {
indices_ausentes <- which(is.na(data[[columna]]))
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = "NA",
stringsAsFactors = FALSE))
}
if (is.character(data[[columna]])) {
indices_vacios <- which(data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_vacios)),
Indice = indices_vacios,
Valor = "",
stringsAsFactors = FALSE))
}
}
return(valores_ausentes)
}
detectar_valores_ausentes(iris)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = data[[columna]][indices_ausentes],
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
detectar_valores_ausentes(iris)
library(readr)
habito <- read_delim("C:/Users/User/OneDrive - Ministerio de Educacion y Ciencias/00_Cursos/Taller_CDRP/datos/Hábito.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(habito)
detectar_valores_ausentes(habito)
h <- detectar_valores_ausentes(habito)
View(h)
library(haven)
empresas <- read_sav("C:/Users/User/OneDrive - Ministerio de Educacion y Ciencias/00_Cursos/Taller_CDRP/datos/empresas.sav")
View(empresas)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = data[[columna]][indices_ausentes],
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
h <- detectar_valores_ausentes(empresa)
h <- detectar_valores_ausentes(empresas)
View(empresas)
h <- detectar_valores_ausentes(empresas)
View(empresas)
h <- detectar_valores_ausentes(empresas[,1:20])
h <- detectar_valores_atipicos(empresas[,1:20])
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = data[[columna]][indices_ausentes],
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
h <- detectar_valores_ausentes(empresas[,1:20])
h <- detectar_valores_atipicos(empresas[,1:20])
empresas <- read_sav("C:/Users/User/OneDrive - Ministerio de Educacion y Ciencias/00_Cursos/Taller_CDRP/datos/empresas.sav")
h <- detectar_valores_atipicos(empresas[,1:20])
library(GKR)
h <- detectar_valores_ausentes(empresas[,1:20])
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = data[[columna]][indices_ausentes],
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
h <- detectar_valores_ausentes(empresas[,1:20])
detectar_valores_ausentes(empresas[,1:20])
h <- detectar_valores_ausentes(iris)
View(h)
h <- detectar_valores_ausentes(empresas)
View(h)
View(empresas)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = as.character(data[[columna]][indices_ausentes]),
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = as.character(data[[columna]][indices_ausentes]),
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
h <- detectar_valores_ausentes(empresas)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- list()
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes[[columna]] <- data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = as.character(data[[columna]][indices_ausentes]),
stringsAsFactors = FALSE)
}
return(valores_ausentes)
}
h <- detectar_valores_ausentes(empresas)
empresas <- read_sav("C:/Users/User/OneDrive - Ministerio de Educacion y Ciencias/00_Cursos/Taller_CDRP/datos/empresas.sav")
detectar_valores_ausentes <- function(data) {
valores_ausentes <- list()  # Usamos una lista para almacenar los resultados
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes_columna <- data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = data[[columna]][indices_ausentes],
stringsAsFactors = FALSE)
valores_ausentes[[columna]] <- valores_ausentes_columna
}
# Combinamos los resultados en un solo data frame
valores_ausentes_df <- do.call(rbind, valores_ausentes)
return(valores_ausentes_df)
}
h <- detectar_valores_ausentes(empresas)
detectar_valores_ausentes(empresas)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),  # Asegura que la columna Valor sea character
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_ausentes <- rbind(valores_ausentes, data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = as.character(data[[columna]][indices_ausentes]),  # Convierte a character
stringsAsFactors = FALSE))
}
return(valores_ausentes)
}
detectar_valores_ausentes(empresas)
detectar_valores_atipicos(empresas)
detectar_valores_atipicos(iris)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_atributos <- data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = as.character(data[[columna]][indices_ausentes]),  # Convertir a character
stringsAsFactors = FALSE)
valores_ausentes <- rbind(valores_ausentes, valores_atributos)
}
return(valores_ausentes)
}
detectar_valores_atipicos(iris)
detectar_valores_atipicos(empresas)
detectar_valores_atipicos(empresas)
str(empresas)
empresas <- empresas[,1:10]
detectar_valores_atipicos(empresas)
detectar_valores_atipicos(mtcars)
library(readxl)
rue <- read_excel("C:/Users/User/OneDrive - Ministerio de Educacion y Ciencias/00_Proyectos/MEC/variables/rue_muestra_4000.xlsx")
View(rue)
detectar_valores_atipicos(rue)
detectar_valores_atipicos(rue[,1:10])
detectar_valores_atipicos(rue[,1:20])
library(readr)
Viaje <- read_delim("C:/Users/User/OneDrive - Ministerio de Educacion y Ciencias/00_Cursos/Taller_CDRP/datos/Viaje.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(Viaje)
detectar_valores_ausentes(Viaje)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Indice = integer(),
Valor = character(),
stringsAsFactors = FALSE)
for (columna in colnames(data)) {
indices_ausentes <- which(is.na(data[[columna]]) | data[[columna]] == "")
valores_atributos <- data.frame(Variable = rep(columna, length(indices_ausentes)),
Indice = indices_ausentes,
Valor = as.character(data[[columna]][indices_ausentes]),  # Convertir a character
stringsAsFactors = FALSE)
valores_ausentes <- rbind(valores_ausentes, valores_atributos)
}
return(valores_ausentes)
}
detectar_valores_ausentes(Viaje)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Indice = integer(),
Variable = character(),
Cantidad_Ausentes = integer(),
Porcentaje_Ausentes = numeric(),
stringsAsFactors = FALSE)
indice <- 1  # Inicializamos el índice
for (columna in colnames(data)) {
cantidad_ausentes <- sum(is.na(data[[columna]]) | data[[columna]] == "")
total_registros <- length(data[[columna]])
porcentaje_ausentes <- (cantidad_ausentes / total_registros) * 100
valores_atributos <- data.frame(Indice = indice,
Variable = columna,
Cantidad_Ausentes = cantidad_ausentes,
Porcentaje_Ausentes = porcentaje_ausentes,
stringsAsFactors = FALSE)
valores_ausentes <- rbind(valores_ausentes, valores_atributos)
indice <- indice + 1  # Incrementamos el índice
}
return(valores_ausentes)
}
detectar_valores_ausentes(Viaje)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Indice = integer(),
Variable = character(),
Cantidad_Ausentes = integer(),
Porcentaje_Ausentes = numeric(),
stringsAsFactors = FALSE)
indice <- 1  # Inicializamos el índice
for (columna in colnames(data)) {
cantidad_ausentes <- sum(is.na(data[[columna]]) | data[[columna]] == "")
total_registros <- length(data[[columna]])
porcentaje_ausentes <- paste((cantidad_ausentes / total_registros) * 100, "%", sep = "")
valores_atributos <- data.frame(Indice = indice,
Variable = columna,
Cantidad_Ausentes = cantidad_ausentes,
Porcentaje_Ausentes = porcentaje_ausentes,
stringsAsFactors = FALSE)
valores_ausentes <- rbind(valores_ausentes, valores_atributos)
indice <- indice + 1  # Incrementamos el índice
}
return(valores_ausentes)
}
detectar_valores_ausentes(Viaje)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Indice = integer(),
Variable = character(),
Cantidad_Ausentes = integer(),
Porcentaje_Ausentes = numeric(),
stringsAsFactors = FALSE)
indice <- 1  # Inicializamos el índice
for (columna in colnames(data)) {
cantidad_ausentes <- sum(is.na(data[[columna]]) | data[[columna]] == "")
total_registros <- length(data[[columna]])
porcentaje_ausentes <- paste((round(cantidad_ausentes / total_registros) * 100,2), "%", sep = "")
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Indice = integer(),
Variable = character(),
Cantidad_Ausentes = integer(),
Porcentaje_Ausentes = numeric(),
stringsAsFactors = FALSE)
indice <- 1  # Inicializamos el índice
for (columna in colnames(data)) {
cantidad_ausentes <- sum(is.na(data[[columna]]) | data[[columna]] == "")
total_registros <- length(data[[columna]])
porcentaje_ausentes <- paste(round(cantidad_ausentes / total_registros) * 100, 2), "%", sep = "")
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Indice = integer(),
Variable = character(),
Cantidad_Ausentes = integer(),
Porcentaje_Ausentes = numeric(),
stringsAsFactors = FALSE)
indice <- 1  # Inicializamos el índice
for (columna in colnames(data)) {
cantidad_ausentes <- sum(is.na(data[[columna]]) | data[[columna]] == "")
total_registros <- length(data[[columna]])
porcentaje_ausentes <- paste(round(cantidad_ausentes / total_registros * 100, 2), "%", sep = "")
valores_atributos <- data.frame(Indice = indice,
Variable = columna,
Cantidad_Ausentes = cantidad_ausentes,
Porcentaje_Ausentes = porcentaje_ausentes,
stringsAsFactors = FALSE)
valores_ausentes <- rbind(valores_ausentes, valores_atributos)
indice <- indice + 1  # Incrementamos el índice
}
return(valores_ausentes)
}
detectar_valores_ausentes(Viaje)
porcentaje_ausentes <- paste(round(cantidad_ausentes / total_registros * 100, 2), "%", sep = "")
detectar_valores_ausentes(Viaje)
detectar_valores_ausentes <- function(data) {
valores_ausentes <- data.frame(Variable = character(),
Cantidad_Ausentes = integer(),
Porcentaje_Ausentes = numeric(),
stringsAsFactors = FALSE)
indice <- 1  # Inicializamos el índice
for (columna in colnames(data)) {
cantidad_ausentes <- sum(is.na(data[[columna]]) | data[[columna]] == "")
total_registros <- length(data[[columna]])
porcentaje_ausentes <- paste(round(cantidad_ausentes / total_registros * 100, 2), "%", sep = "")
valores_atributos <- data.frame(
Variable = columna,
Cantidad_Ausentes = cantidad_ausentes,
Porcentaje_Ausentes = porcentaje_ausentes,
stringsAsFactors = FALSE)
valores_ausentes <- rbind(valores_ausentes, valores_atributos)
}
return(valores_ausentes)
}
detectar_valores_ausentes(Viaje)
detectar_valores_ausentes(iris)
reemplazar_valores <- function(data, columna, valor_antiguo, valor_nuevo) {
if (!columna %in% colnames(data)) {
stop("La columna especificada no existe en el data frame.")
}
data[[columna]][data[[columna]] == valor_antiguo] <- valor_nuevo
return(data)
}
iris
reemplazar_valores(iris, "Species", "virginica", "No Existe")
reemplazar_valores(iris, "Species", "virginica", "21")
reemplazar_valores <- function(data, columna, valor_original, valor_nuevo) {
if (missing(data) || missing(columna) || missing(valor_original) || missing(valor_nuevo)) {
stop("Todos los argumentos deben ser especificados: data, columna, valor_original y valor_nuevo")
}
if (!columna %in% colnames(data)) {
stop("La columna especificada no existe en la base de datos")
}
data[[columna]][data[[columna]] == valor_original] <- valor_nuevo
return(data)
}
# Crear un data frame de ejemplo
data <- data.frame(
Nombre = c("Ana", "Juan", "María", "Pedro"),
Edad = c(25, 30, 22, 35)
)
# Mostrar el data frame original
print(data)
# Reemplazar valores en la columna "Edad"
nuevo_data <- reemplazar_valores(data, "Edad", 30, 31)
# Mostrar el data frame modificado
print(nuevo_data)
# Reemplazar valores en la columna "Edad"
nuevo_data <- reemplazar_valores(iris, "Species", setosa, xxxx)
# Reemplazar valores en la columna "Edad"
nuevo_data <- reemplazar_valores(iris, "Species", "setosa", "xxxx")
View(data)
View(nuevo_data)
# Reemplazar valores en la columna "Edad"
nuevo_data <- reemplazar_valores(data, "Nombre", "Juan", "Pedro")
View(nuevo_data)
# Crear un data frame de ejemplo
data <- data.frame(
Nombre = c("Ana", "Juan", "María", "Pedro"),
Edad = c(25, 30, 22, 35)
)
# Mostrar el data frame original
print(data)
# Reemplazar valores en la columna "Edad"
nuevo_data <- reemplazar_valores(data, "Nombre", "Juan", "Pedro")
# Mostrar el data frame modificado
print(nuevo_data)
dicotomizar_variables <- function(data, columnas) {
if (missing(data) || missing(columnas)) {
stop("Todos los argumentos deben ser especificados: data y columnas")
}
if (!is.data.frame(data)) {
stop("El primer argumento debe ser un data frame")
}
if (!is.character(columnas) && !is.factor(columnas)) {
stop("El segundo argumento debe ser un vector de nombres de columnas o factores")
}
# Convertir columnas a factores si son cadenas
if (is.character(columnas)) {
data[columnas] <- lapply(data[columnas], factor)
}
# Dicotomizar columnas factores
for (col in colnames(data)) {
if (col %in% columnas) {
unique_vals <- levels(data[[col]])
for (val in unique_vals) {
new_col_name <- paste(col, val, sep = "_")
data[[new_col_name]] <- as.integer(data[[col]] == val)
}
}
}
return(data)
}
# Crear un data frame de ejemplo
data <- data.frame(
Genero = c("Masculino", "Femenino", "Masculino", "Femenino"),
Ciudad = c("A", "B", "A", "C")
)
# Mostrar el data frame original
print(data)
# Dicotomizar las variables "Genero" y "Ciudad"
columnas_a_dicotomizar <- c("Genero", "Ciudad")
nuevo_data <- dicotomizar_variables(data, columnas_a_dicotomizar)
# Mostrar el data frame dicotomizado
print(nuevo_data)
nuevo_data <- dicotomizar_variables(iris, "Species")
# Mostrar el data frame dicotomizado
print(nuevo_data)
if(!require(GKR))devtools::install_github("oscar-pry/gkr")
resumen(iris)
if(!require(GKR))devtools::install_github("oscar-pry/gkr")
resumen(iris)
calculate_kurtosis_skewness_all(iris)
shapiro_wilk_all(iris)
calculate_kurtosis_skewness_all
if(!require(GKR))devtools::install_github("oscar-pry/gkr")
calculate_kurtosis_skewness_all(iris)
shapiro_wilk_all(iris)
